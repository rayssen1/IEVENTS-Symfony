{% extends 'evenement/base-back.html.twig' %}
{% block title %}User index{% endblock %}
{% block body %}
<!-- Bootstrap CSS -->
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css" rel="stylesheet">
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
<script src="https://cdn.jsdelivr.net/npm/chartjs-chart-matrix@1.2.0/dist/chartjs-chart-matrix.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/2.5.1/jspdf.umd.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/jspdf-autotable/3.5.23/jspdf.plugin.autotable.min.js"></script>

<div class="container mt-5">
    <div class="card shadow-sm">
        <div class="mt-4 text-center">
                 <button class="btn btn-primary" onclick="generatePDF()">Generate PDF</button>
        </div>
        <div class="card-body">
            <h1 class="mb-4 text-center">User List</h1>

            <div class="table-responsive">
                <table class="table table-striped table-hover table-bordered align-middle">
                    <thead class="table-dark">
                        <tr>
                            <th scope="col">Nom</th>
                            <th scope="col">Prénom</th>
                            <th scope="col">Email</th>
                            <th scope="col">Role</th>
                            <th scope="col">State</th>
                            <th scope="col">Phone</th>
                            <th scope="col">Actions</th>
                        </tr>
                    </thead>
                    <tbody id="user-table-body">
                            {% include 'user/_user_rows.html.twig' %}
                    </tbody>
                </table>
            </div>
            <div class="d-flex justify-content-center mt-4">
                    {{ knp_pagination_render(users) }}
            </div>
        </div>
    </div>
</div>

<div class="container mt-5">
    <div class="row g-4">
        <div class="col-md-6">
            <div class="card shadow-sm">
                <div class="card-body">
                    <h5 class="card-title text-center">Role Distribution</h5>
                    <canvas id="roleChart" style="max-width: 100%; height: auto;"></canvas>
                    <script>
                        new Chart(document.getElementById('roleChart'), {
                        type: 'pie',
                        data: {
                            labels: {{ roleLabels|json_encode|raw }},
                            datasets: [{
                                data: {{ roleCounts|json_encode|raw }},
                                backgroundColor: ['#FF6384', '#36A2EB', '#FFCE56']
                            }]
                        }
                            });
                    </script>
                </div>
            </div>
         </div>

        <div class="col-md-6">
            <div class="card shadow-sm">
                <div class="card-body">
                    <h5 class="card-title text-center">State Distribution</h5>
                    <canvas id="stateChart" style="max-width: 100%; height: auto;"></canvas>
                    <script>
                    new Chart(document.getElementById('stateChart'), {
                        type: 'pie',
                        data: {
                            labels: {{ stateLabels|json_encode|raw }},
                            datasets: [{
                                data: {{ stateCounts|json_encode|raw }},
                                backgroundColor: ['#4BC0C0', '#FF9F40']
                            }]
                        }
                    });
                    </script>
                </div>
            </div>
        </div>
          <div class="col-12">
            <div class="card shadow-sm">
                <div class="card-body">
                    <h5 class="card-title text-center">Login Heatmap</h5>
                    <canvas id="loginHeatmap" width="800" height="400"></canvas>
                    <script>
                    const days = {{ loginHeatmap|keys|json_encode|raw }};
                    const heatmapData = [];

                    {% for day, hours in loginHeatmap %}
                        {% set dayIndex = loop.index0 %}
                        {% for hour, count in hours %}
                            heatmapData.push({
                                x: {{ hour }},
                                y: {{ dayIndex }},
                                v: {{ count }}
                            });
                        {% endfor %}
                    {% endfor %}

                    const ctx = document.getElementById('loginHeatmap').getContext('2d');
                    new Chart(ctx, {
                        type: 'matrix',
                        data: {
                            datasets: [{
                                label: 'Logins Heatmap',
                                data: heatmapData,
                                backgroundColor(ctx) {
                                    const value = ctx.dataset.data[ctx.dataIndex].v;
                                    return value === 0 ? '#EEE' : `rgba(75, 192, 192, ${Math.min(1, value / 10)})`;
                                },
                                width: ({chart}) => (chart.chartArea || {}).width / 24 - 2,
                                height: ({chart}) => (chart.chartArea || {}).height / 7 - 2,
                            }]
                        },
                        options: {
                            scales: {
                                x: {
                                    type: 'linear',
                                    position: 'bottom',
                                    min: 0,
                                    max: 23,
                                    ticks: {
                                        stepSize: 1,
                                        callback: value => value + ":00"
                                    },
                                    title: { display: true, text: 'Hour of Day' }
                                },
                                y: {
                                    type: 'linear',
                                    position: 'left',
                                    min: 0,
                                    max: 6,
                                    ticks: {
                                        stepSize: 1,
                                        callback: value => days[value]
                                    },
                                    title: { display: true, text: 'Day of Week' }
                                }
                            },
                            plugins: {
                                legend: { display: false },
                                tooltip: {
                                    callbacks: {
                                        label: ctx => `Logins: ${ctx.raw.v}`
                                    }
                                }
                            }
                        }
                    });
                    </script>
                    
                </div>
            </div>
        </div>
    </div>
</div>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"></script>
<script>
function generatePDF() {
    const { jsPDF } = window.jspdf;
    const doc = new jsPDF();

    // —————————————————————————
    // 1) HEADER with Date
    // —————————————————————————
    const today = new Date();
    const dateStr = [
        String(today.getDate()).padStart(2, '0'),
        String(today.getMonth() + 1).padStart(2, '0'),
        today.getFullYear()
    ].join('/');

    doc.setFontSize(18);
    doc.setTextColor(0, 82, 155);           // Dark blue for IEVENTS
    doc.text("IEVENTS", 10, 20);

    doc.setFontSize(16);
    doc.setTextColor(60, 60, 60);           // Dark gray for date
    doc.text(dateStr, 160, 20);

    // —————————————————————————
    // 2) STATS TABLE with color styling
    // —————————————————————————
    const pageWidth       = doc.internal.pageSize.getWidth();
const metricColWidth  = 60;
const countColWidth   = 30;
const tableWidth      = metricColWidth + countColWidth;
const marginLeft      = (pageWidth - tableWidth) / 2;

doc.autoTable({
  startY: 30,
  margin: { left: marginLeft },
  tableWidth: tableWidth,      // lock in the total width
  head: [['Metric', 'Count']],
  body: [
    ['Total Users', '{{ users|length }}'],
    ['Admin Users', '{{ roleCounts[0] }}'],
    ['Participant Users', '{{ roleCounts[1] }}'],
    ['Organisateur Users', '{{ roleCounts[2] }}'],
    ['Active Users', '{{ stateCounts[0] }}'],
    ['Inactive Users', '{{ stateCounts[1] }}']
  ],
  theme: 'striped',
  headStyles: {
    fillColor: [54, 162, 235],
    textColor: 255,
    fontStyle: 'bold'
  },
  alternateRowStyles: {
    fillColor: [245, 245, 245]
  },
  styles: {
    fontSize: 12,
    textColor: 60,
    cellPadding: 4,
    lineColor: [200, 200, 200],
    lineWidth: 0.1
  },
  columnStyles: {
    0: { cellWidth: metricColWidth, halign: 'center' },
    1: { cellWidth: countColWidth,  halign: 'center' }
  }
});

    // —————————————————————————
    // 3) FULL USER LIST on new page with colors
    // —————————————————————————
    doc.addPage();
    doc.autoTable({
        startY: 20,
        head: [['Nom','Prénom','Email','Role','State','Phone']],
        body: [
            {% for user in users %}
            [
                '{{ user.nom }}',
                '{{ user.prenom }}',
                '{{ user.email }}',
                '{{ user.role }}',
                '{{ user.state }}',
                '{{ user.phoneNumber }}'
            ],
            {% else %}
            ['No data','','','','',''],
            {% endfor %}
        ],
        theme: 'striped',
        headStyles: {
            fillColor: [40, 40, 40],     // dark charcoal
            textColor: 255,
            fontStyle: 'bold'
        },
        alternateRowStyles: {
            fillColor: [230, 240, 255]   // very light blue stripe
        },
        styles: {
            fontSize: 10,
            textColor: 50,
            cellPadding: 3,
            lineColor: [210, 210, 210],
            lineWidth: 0.1
        },
        columnStyles: {
            0: { cellWidth: 25 },
            1: { cellWidth: 25 },
            2: { cellWidth: 50 },
            3: { cellWidth: 25 },
            4: { cellWidth: 25 },
            5: { cellWidth: 25 }
        }
    });

    // —————————————————————————
    // 4) SAVE
    // —————————————————————————
    doc.save('User_List_' + dateStr.replace(/\//g, '-') + '.pdf');
}
</script>


<script>
document.addEventListener('DOMContentLoaded', () => {
    const searchInput = document.getElementById('search-input');
    const tableBody   = document.getElementById('user-table-body');
    let timeout       = null;

    searchInput.addEventListener('input', () => {
        clearTimeout(timeout);
        timeout = setTimeout(() => {
            const q = encodeURIComponent(searchInput.value);

            fetch(`{{ path('app_user_index') }}?search=${q}`, {
                headers: {
                    'X-Requested-With': 'XMLHttpRequest'
                }
            })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not OK');
                }
                return response.text();
            })
            .then(html => {
                // Replace only the rows inside your <tbody id="user-table-body">
                tableBody.innerHTML = html;
            })
            .catch(err => console.error('Live search error:', err));
        }, 300); // wait 300ms after last keystroke
    });
});
</script>

{% endblock %}

